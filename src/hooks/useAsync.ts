import { useState, useEffect } from 'react'; const cache = {}; export function useAsync<T>(asyncFunction: () => Promise<T>, dependencies: any[]): { data: T | null; error: Error | null; isLoading: boolean } { const cacheKey = JSON.stringify(dependencies); const [data, setData] = useState<T | null>(cache[cacheKey] || null); const [error, setError] = useState<Error | null>(null); const [isLoading, setLoading] = useState(!cache[cacheKey]); useEffect(() => { if (!cache[cacheKey]) { asyncFunction().then(response => { setData(response); cache[cacheKey] = response; }).catch(setError).finally(() => setLoading(false)); } }, [cacheKey, asyncFunction]); return { data, error, isLoading }; }